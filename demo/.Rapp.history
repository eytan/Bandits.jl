summary(lm(y ~ factor(s.high), data=o, weights=1/p.high))
summary(lm(y ~ factor(s.high), data=o, weights=p.high))
summary(lm(y ~ factor(s.high), data=subset(o, obs.context==3), weights=p.high))
?felm
library(lfe)
?felm
m <- felm(y ~ factor(s.low)*I(obs.context==1) + factor(s.high)*I(obs.context==3) || userid, data=o)
library(foreach)#
library(dplyr)#
library(lfe)#
#
gen.users <- function(N) {#
  df <- data.frame(#
    userid=1:N,#
    latent.class=-rnorm(N, 0, 1)#
  ) %>%#
  mutate(#
    # treatment conditions for each context#
    s.low=floor(runif(N, min=1,max=4)),#
  s.mid=floor(runif(N, min=2,max=8)),#
    s.high=floor(runif(N, min=5,max=10)),#
    # probability of user being in each context#
    p.low=1-pnorm(-1/3, latent.class),#
    p.mid=1-pnorm(0, latent.class),#
    p.high=1-pnorm(1/3, latent.class),#
    frac.sum=p.low+p.mid+p.high,#
    p.low=p.low/frac.sum,#
    p.mid=p.mid/frac.sum,#
    p.high=p.high/frac.sum#
  ) %>% select(-frac.sum)#
  df#
}#
#
f <- function(x, center) {#
	1/(center^2)*(center^2-(x-center)^2)#
}#
sim.outcomes <- function(df) {#
  foreach(i=1:nrow(df), .combine=rbind) %do% {#
  	row = df[i,]#
    context <- sample(#
      x=c(1,2,3),#
      size=1,#
      prob=c(df[i,'p.low'], df[i, 'p.mid'], df[i, 'p.high'])#
    )#
    mutate(df[i,],#
      obs.context=context,#
      y=#
      0.2*f(2,s.low)*(context==1)+#
      0.4*f(5,s.mid)*(context==2)+#
      0.5*f(8,s.high)*(context==3)+#
      rnorm(1, 0, 1) + latent.class#
    )#
  }#
}#
#
grid <- expand.grid(s.low=factor(1:3), s.mid=factor(2:7), s.high=factor(5:9), obs.context=1:3)#
d <- gen.users(1000)#
o <- foreach(i=1:20, .combine=rbind) %dopar% {sim.outcomes(d)}#
# one could #
#
m <- felm(y ~ factor(s.low)*I(obs.context==1) + factor(s.high)*I(obs.context==3) || userid, data=o)#
summary(m)
m <- felm(y ~ factor(s.low)*I(obs.context==1) + factor(s.high)*I(obs.context==3) ||| userid, data=o)
m <- felm(y ~ factor(s.low)*I(obs.context==1) + factor(s.high)*I(obs.context==3) |1| userid, data=o)
m <- felm(y ~ factor(s.low)*I(obs.context==1) + factor(s.high)*I(obs.context==3) |1|1| userid, data=o)
m <- felm(y ~ factor(s.low) + factor(s.high)|| userid, data=o)
m <- felm(y ~ factor(s.low) + factor(s.high), data=o)
m <- felm(y ~ factor(s.low) + factor(s.high) | 1, data=o)
m <- felm(y ~ factor(s.low) + factor(s.high) | 1 | 1, data=o)
m <- felm(y ~ factor(s.low) + factor(s.high) | 1 | userid, data=o)
head(o)
m <- felm(y ~ factor(s.low) + factor(s.high) | 1 | factor(userid), data=o)
m <- felm(y ~ factor(s.low) + factor(s.high) | 0 | factor(userid), data=o)
?felm
m <- felm(y ~ factor(s.low) + factor(s.high), clustvar='userid', data=o)
m <- felm(y ~ factor(s.low) + factor(s.high), clustervar='userid', data=o)
head(o)
m <- felm(y ~ factor(s.low) + factor(s.high), clustervar='userid', data=o)
m <- felm(y ~ factor(s.low) + factor(s.high), clustervar='userid', data=transform(o, userid=factor(userid))
)
m <- felm(y ~ factor(s.low) + factor(s.high)|userid, data=transform(o, userid=factor(userid))
)
m <- felm(y ~ factor(s.low) + factor(s.high)||userid, data=transform(o, userid=factor(userid)))
m <- felm(y ~ factor(s.low) + factor(s.high)|.|userid, data=transform(o, userid=factor(userid)))
m <- felm(y ~ factor(s.low) + factor(s.high)||.|userid, data=transform(o, userid=factor(userid)))
m <- felm(y ~ factor(s.low) + factor(s.high)||.||userid, data=transform(o, userid=factor(userid)))
m <- felm(y ~ factor(s.low) + factor(s.high)||||userid, data=transform(o, userid=factor(userid)))
m <- felm(y ~ factor(s.low) + factor(s.high)|||userid, data=transform(o, userid=factor(userid)))
m <- lm(y ~ factor(s.low)*I(obs.context==1) + factor(s.high)*I(obs.context==3), data=o)
summary(m)
grid %>% mutate(y.hat=predict(m, .)) %>% head
summary(lm(y ~ factor(s.high), data=subset(o, obs.context==3))#
summary(lm(y ~ factor(s.high), data=o))#
summary(lm(y ~ factor(s.high), data=o, weights=p.high))
summary(lm(y ~ factor(s.high), data=o)
summary(lm(y ~ factor(s.high), data=o, weights=p.high)
summary(lm(y ~ factor(s.high), data=o))
summary(lm(y ~ factor(s.high), data=subset(o, obs.context==3)))
summary(lm(y ~ factor(s.high), data=o))
summary(lm(y ~ factor(s.high), data=o, weights=p.high))
gen.users <- function(N) {#
  df <- data.frame(#
    userid=1:N,#
    latent.class=-rnorm(N, 0, 1)#
  ) %>%#
  mutate(#
    # treatment conditions for each context#
    s.low=floor(runif(N, min=1,max=4)),#
    s.high=floor(runif(N, min=5,max=10)),#
    # probability of user being in each context#
    p.low=1-pnorm(-1/3, latent.class),#
    p.high=1-p.low#
  )#
  df#
}#
#
sim.outcomes <- function(df) {#
  foreach(i=1:nrow(df), .combine=rbind) %do% {#
  	row = df[i,]#
    context <- sample(#
      x=c(1,2),#
      size=1,#
      prob=c(df[i,'p.low'], df[i, 'p.high'])#
    )#
    mutate(df[i,],#
      obs.context=context,#
      y=#
      rnorm(1,s.low)*(context==1)+#
      rnorm(1,s.high)*(context==2)+#
      rnorm(1, 0, 1) + latent.class#
    )#
  }#
}#
grid <- expand.grid(s.low=factor(1:3), s.high=factor(5:9), obs.context=1:3)#
d <- gen.users(1000)#
o <- foreach(i=1:20, .combine=rbind) %dopar% {sim.outcomes(d)}#
#
strata = seq(0,.99,by=.01)#
stratify_mean <- function(x) {#
	wts = rexp(nrow(o),1)#
	coef(#
		summary(#
			lm(y~s.low, data=o, subset=p.low>x & p.low<=x+.01,weights=wts)#
		)#
	)['s.low',1]#
}#
mns = replicate(1000,weighted.mean( sapply(strata,FUN=stratify_mean) ,1/(strata+.005)))#
#
c(mean=mean(mns),se=sd(mns))
strata = seq(0,.99,by=.01)#
stratify_mean <- function(x) {#
	wts = rexp(nrow(o),1)#
	coef(#
		summary(#
			lm(y~s.low, data=o, subset=p.low>x & p.low<=x+.01,weights=wts)#
		)#
	)['s.low',1]#
}
mns = replicate(1000,weighted.mean( sapply(strata,FUN=stratify_mean) ,1/(strata+.005)))
gen.users <- function(N) {#
  df <- data.frame(#
    userid=1:N,#
    latent.class=-rnorm(N, 0, 1)#
  ) %>%#
  mutate(#
    # treatment conditions for each context#
    s.low=floor(runif(N, min=1,max=4)),#
    s.high=floor(runif(N, min=5,max=10)),#
    # probability of user being in each context#
    p.low=1-pnorm(-1/3, latent.class),#
    p.high=1-p.low#
  )#
  df#
}#
#
sim.outcomes <- function(df) {#
  foreach(i=1:nrow(df), .combine=rbind) %do% {#
  	row = df[i,]#
    context <- sample(#
      x=c(1,2),#
      size=1,#
      prob=c(df[i,'p.low'], df[i, 'p.high'])#
    )#
    mutate(df[i,],#
      obs.context=context,#
      y=#
      rnorm(1,s.low)*(context==1)+#
      rnorm(1,s.high)*(context==2)+#
      rnorm(1, 0, 1) + latent.class#
    )#
  }#
}#
grid <- expand.grid(s.low=factor(1:3), s.high=factor(5:9), obs.context=1:3)#
d <- gen.users(1000)#
o <- foreach(i=1:20, .combine=rbind) %dopar% {sim.outcomes(d)}
strata = seq(0,.99,by=.01)#
stratify_mean <- function(x) {#
	wts = rexp(nrow(o),1)#
	coef(#
		summary(#
			lm(y~s.low, data=o, subset=p.low>x & p.low<=x+.01,weights=wts)#
		)#
	)['s.low',1]#
}
mns = replicate(1000,weighted.mean( sapply(strata,FUN=stratify_mean) ,1/(strata+.005)))
mns
c(mean=mean(mns),se=sd(mns))
as.POSIXlt(1401692400)
as.POSIXlt(1401692400, origin='1970-01-01')
as.POSIXlt(145692400, origin='1970-01-01')
as.POSIXlt(1401692400, origin='1970-01-01')
as.POSIXlt(1501692400, origin='1970-01-01')
as.POSIXlt(1401692400, origin='1970-01-01')
as.POSIXlt(1402692400, origin='1970-01-01')
as.POSIXlt(1412692400, origin='1970-01-01')
as.POSIXlt(1452692400, origin='1970-01-01')
as.POSIXlt(1442692400, origin='1970-01-01')
as.POSIXlt(1432692400, origin='1970-01-01')
as.POSIXlt(1431692400, origin='1970-01-01')
as.POSIXlt(1421692400, origin='1970-01-01')
as.POSIXlt(1431692400, origin='1970-01-01')
as.POSIXlt(1431492400, origin='1970-01-01')
as.POSIXlt(1431192400, origin='1970-01-01')
as.numeric(as.POSIXlt(1431192400, origin='1970-01-01'))
25e3/7
25e3/7/10
25e3/7/10*14
power.prop.test(n=1.5e9, p=0.001)
power.prop.test(n=1.5e9, p=0.001, power=0.8)
power.prop.test(n=1.5e9, p1=0.001, power=0.9)
power.prop.test(n=1.5e9, p1=0.0001, power=0.9)
power.prop.test(n=1.5e9, p1=0.0000001, power=0.9)
power.prop.test(n=1.5e9, p1=0.0000001, power=0.99)
install.packages('devtools')
ibrary(dplyr)#
library(broom)#
library(foreach)#
library(doMC)#
library(ggplot2)#
library(scales)#
#
library(dplyr)#
library(broom)#
N <- 1e4#
#
# generates simulated experiment data where we have two experiments,#
# where E1=1 with probability p0, and E2=0 with probability p1#
# interaction is the size of the treatment interaction, expressed in terms#
# of delta1, and delta2 is the treatment effect of E2.#
sim.interactions <- function(interaction, p0=0.5, p1=0.5, delta2=0.02) {#
	delta1 <- 0.01#
	sim.data <- data.frame(#
	  E1=rbinom(N, 1, p0),#
	  E2=rbinom(N,1, p1)#
	) %>%#
    mutate(#
      y=0.1 + E1*delta1 + E2*delta2 + E1*E2*delta1*interaction +#
      rnorm(N, 0, 0.05)#
    )#
    rbind(#
      cbind(tidy(lm(y ~ E1, data=sim.data)), experiment='E1'),#
      cbind(tidy(lm(y ~ E2, data=sim.data)), experiment='E2')#
    ) %>%#
    filter(term %in% c('E1','E2'))#
}#
# Here, we have two 50/50 A/B tests, E1 and E2. We keep the treatment#
# effect of E1 constant at 0.1, and look at how running E1 and E2 at#
# the same time affects our estimate of the ATE for E1 as we consider#
# different effect sizes for E2, ranging from 0 to 10x that of E1.#
d2 <- foreach(delta2=seq(0,0.1, 0.01), .combine=rbind) %do% {#
  cbind(delta2=delta2, sim.interactions(0, 0.5, 0.5, delta2))#
}#
#
# You can see that this adds very little variance to our estimate of#
# the effect of E1, even in cases when E2 is 10x stronger than E1. #
qplot(delta2, estimate, data=d2, facets=.~term) + geom_pointrange(aes(ymin=estimate-1.96*std.error, ymax=estimate+1.96*std.error)) + geom_hline(yintercept=0.01)
# of delta1, and delta2 is the treatment effect of E2.#
sim.interactions <- function(interaction, p0=0.5, p1=0.5, delta2=0.02) {#
	delta1 <- 0.01#
	sim.data <- data.frame(#
	  E1=rbinom(N, 1, p0),#
	  E2=rbinom(N,1, p1)#
	) %>%#
    mutate(#
      y=0.1 + E1*delta1 + E2*delta2 + E1*E2*delta1*interaction +#
      rnorm(N, 0, 0.05)#
    )#
    rbind(#
      cbind(tidy(lm(y ~ E1, data=sim.data)), experiment='E1',real=0.01),#
      cbind(tidy(lm(y ~ E2, data=sim.data)), experiment='E2',real=delta2)#
    ) %>%#
    filter(term %in% c('E1','E2'))#
}
# Here, we have two 50/50 A/B tests, E1 and E2. We keep the treatment#
# effect of E1 constant at 0.1, and look at how running E1 and E2 at#
# the same time affects our estimate of the ATE for E1 as we consider#
# different effect sizes for E2, ranging from 0 to 10x that of E1.#
d2 <- foreach(delta2=seq(0,0.1, 0.01), .combine=rbind) %do% {#
  cbind(delta2=delta2, sim.interactions(0, 0.5, 0.5, delta2))#
}#
#
# You can see that this adds very little variance to our estimate of#
# the effect of E1, even in cases when E2 is 10x stronger than E1. #
qplot(delta2, estimate, data=d2, facets=.~term) + geom_pointrange(aes(ymin=estimate-1.96*std.error, ymax=estimate+1.96*std.error)) + geom_hline(yintercept=0.01)
qplot(real, estimate,data=d2)
qplot(real, estimate,data=d2, facets=.~experiment)
qplot(real, estimate,data=d2) + facet_grid(facets=.~experiment,scale='free')
qplot(real, estimate,data=d2) + facet_grid(facets=.~experiment,scales='free')
qplot(real, estimate,data=d2) + facet_grid(facets=.~experiment,scale='free')
qplot(delta2, real-estimate,data=d2) + facet_grid(facets=.~experiment,scale='free')
?btgp
library(tgp)
?btgp
###
#
# #
# simple linear response#
##
#
# input and predictive data#
X <- seq(0,1,length=50)#
XX <- seq(0,1,length=99)#
Z <- 1 + 2*X + rnorm(length(X),sd=0.25)#
#
out <- blm(X=X, Z=Z, XX=XX)	# try Linear Model#
plot(out)			# plot the surface
##
# 2-d example#
# (using the isotropic correlation function)#
##
#
# construct some 2-d nonstationary data#
exp2d.data <- exp2d.rand()#
X <- exp2d.data$X; Z <- exp2d.data$Z#
XX <- exp2d.data$XX#
#
# try a GP#
out <- bgp(X=X, Z=Z, XX=XX, corr="exp") 	#
plot(out) 			# plot the surface
# try a treed GP LLM#
out <- btgpllm(X=X, Z=Z, XX=XX, corr="exp") #
plot(out) 			# plot the surface#
tgp.trees(out) 		 	# plot the MAP trees
##
# Motorcycle Accident Data#
##
#
# get the data#
require(MASS)#
#
# try a GP #
out <- bgp(X=mcycle[,1], Z=mcycle[,2])#
plot(out)			# plot the surface#
#
# try a treed GP LLM#
# best to use the "b0" beta linear prior to capture common#
# common linear process throughout all regions (using the#
# ellipses "...") #
out <- btgpllm(X=mcycle[,1], Z=mcycle[,2], bprior="b0")#
plot(out)			# plot the surface#
tgp.trees(out)		 	# plot the MAP trees
Stangle(vignette("exp", package="tgp")$file)
?bgp
# #
# simple linear response#
##
#
# input and predictive data#
X <- seq(0,1,length=50)#
XX <- seq(0,1,length=99)#
Z <- 1 + 2*X + rnorm(length(X),sd=0.25)#
#
out <- blm(X=X, Z=Z, XX=XX)	# try Linear Model#
plot(out)			# plot the surface
# get the data#
require(MASS)#
#
# try a GP #
out <- bgp(X=mcycle[,1], Z=mcycle[,2])#
plot(out)			# plot the surface#
#
# try a treed GP LLM#
# best to use the "b0" beta linear prior to capture common#
# common linear process throughout all regions (using the#
# ellipses "...") #
out <- btgpllm(X=mcycle[,1], Z=mcycle[,2], bprior="b0")#
plot(out)			# plot the surface#
tgp.trees(out)		 	# plot the MAP trees
plot(moto.btlm, main=✬Bayesian CART,✬, layout=✬surf✬)
?btlm
f <- friedman.1.data(200)
ff <- friedman.1.data(1000)
f
X <- f[,1:10]; Z <- f$Y
XX <- ff[,1:10]
fr.btlm <- btlm(X=X, Z=Z, XX=XX, tree=c(0.95,2), pred.n=FALSE, verb=0)
fr.btlm.mse <- sqrt(mean((fr.btlm$ZZ.mean - ff$Ytrue)^2))
fr.bgpllm <- bgpllm(X=X, Z=Z, XX=XX, pred.n=FALSE, verb=0)
fr.bgpllm
head(X)
predict(fr.bgpllm, X)
predict(fr.bgpllm, XX=XX)
predict(fr.bgpllm, XX=XX,pred.n=FALSE)
?btgp
head(X)
X
XX
X
tmp <- read.csv("demo.tsv", sep = "\t")
setwd('~/gh/Bandits.jl/demo')
tmp <- read.csv("demo.tsv", sep = "\t")
tmp %>%#
  filter(metric=='reward', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = Algorithm)#
) +#
    geom_line() +#
    facet_grid(Delay ~ .)
library(ggplot2)
library(dplyr)
tmp %>%#
  filter(metric=='reward', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = Algorithm)#
) +#
    geom_line() +#
    facet_grid(Delay ~ .)
head(tmp)
tmp %>%#
  filter(metric=='reward', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = dlgorithm)#
) +#
    geom_line() +#
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='reward', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm)#
) +#
    geom_line() +#
    facet_grid(delay ~ .)
tmp %>%   filter(metric=='reward', T>3)
tmp %>%   filter(metric=='reward', T>3) %>%select(q50)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm)#
) +#
    geom_line() +#
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm)#
) +#
    geom_line() +#
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='knows', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm)#
) +#
    geom_line() +#
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm)#
) +#
    geom_line() +#
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm)#
) +#
+geom_ribbon(aes(ymin=q25,ymax=q75)) + #
    geom_line() +#
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm)#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75)) + #
    geom_line() +#
    facet_grid(delay ~ .)
head(T,filter(metric=='mse', T>3))
head(filter(tmp, metric=='mse', T>3))
tmp <- read.csv("demo.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='mse', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm)#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75)) + #
    geom_line() +#
    facet_grid(delay ~ .)
head(filter(tmp, metric=='mse', T>3))
tmp %>%#
  filter(metric=='mse', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm,fill=algorith)#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75)) + #
    geom_line() +#
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm,fill=algorithm)#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75)) + #
    geom_line() +#
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm,fill=algorithm)#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75)) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm,fill=algorithm)#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75)) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm,fill=algorithm)#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm,fill=algorithm)#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm,fill=algorithm)#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>% filter(metric=='mse')
head(tmp %>% filter(metric=='mse'))
head(tmp %>% filter(metric=='mse', T>1000))
tmp %>%#
  filter(metric=='mse', T>3) %>%#
ggplot(#
    .,#
    aes(x = T, y = q50, color = algorithm,fill=algorithm,log='y')#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=., log='x')#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=., log='y')#
) +#
geom_ribbon(aes(ymin=q25,ymax=q75), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=., log='y')#
) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.)#
) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='mse', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,log='y') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='knows', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='instantaneous_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='reward', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='cumulative_reward', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.1) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.9) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.9) + #
    facet_grid(delay ~ .)
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.1) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.1) + #
    facet_grid(delay ~ .) + them_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.1) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.1) + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.) +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp <- read.csv("demo.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='reward', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='mse', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
head(tmp)
max(tmp$T)
tmp <- read.csv("demo.tsv", sep = "\t")
max(tmp$T)
tmp <- read.csv("demo.tsv", sep = "\t")
max(tmp$T)
?setwd
getwd()
tmp <- read.csv("demo.tsv", sep = "\t")
nrow(tmp)
max(tmp$T)
tmp <- read.csv("demo.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp <- read.csv("demo2.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='mse', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='mse', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',log='y') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',log='y') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line',log='y') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line',log='y') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line',log='y') #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='point',log='y') #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='point') + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ .) + theme_bw()
table(tmp$algorithm)
tmp %>%#
  filter(metric=='cumulative_regret', T>3,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorith) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='mse', T>3,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution',log='x') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='mse', T>3, delay==1#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution',log='x') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(~.algorithm ) + theme_bw()
tmp %>%#
  filter(metric=='mse', T>3, delay==1,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution',log='x') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(~.algorithm ) + theme_bw()
tmp %>%#
  filter(metric=='mse', T>3, delay==1,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution',log='x') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(~.algorithm ) + theme_bw()
tmp %>%#
  filter(metric=='mse', T>3, delay==1,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution',log='x') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(.~algorithm ) + theme_bw()
tmp %>%#
  filter(metric=='mse', T>3, delay==1,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution',log='y') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(.~algorithm ) + theme_bw()
tmp %>%#
  filter(metric=='se_best', T>3, delay==1,#
  algorithm != 'UCB1Tuned(MLELearner(0.500000, 0.250000))') %>%#
qplot(#
x = T, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='cumulative regret', main='regret distribution',log='y') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(.~algorithm ) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q025, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution')
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q975, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution')
tmp %>%#
  filter(metric=='cumulative_regret', T>3,delay==1) %>%#
qplot(#
x = T/1000, y = q975, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') #+#
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3,delay==1) %>%#
qplot(#
x = T/1000, y = max, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') #+#
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ .) + theme_bw()
tmp <- read.csv("big_demo1.tsv", sep = "\t")
tmp <- read.csv("big_demo1s.tsv", sep = "\t")
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()
tmp <- read.csv("big_demo1s.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
tmp <- read.csv("big_demo1s.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()#
tmp %>%#
  filter(metric=='cumulative_regret', T>3,delay==1) %>%#
qplot(#
x = T/1000, y = max, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') #+#
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
   theme_bw()
tmp <- read.csv("lil_demo1.tsv", sep = "\t")
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()
#tmp <- read.csv("big_demo1s.tsv", sep = "\t")#
tmp <- read.csv("big_demo2s.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
   theme_bw()
tmp <- read.csv("demo.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
   theme_bw()
tmp
tmp$T
length(unique(tmp$T)
)
tmp <- read.csv("demo2.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
   theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
tmp <- read.csv("demo.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
   theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
tmp <- read.csv("demo.tsv", sep = "\t")#
#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
    facet_grid(delay ~ algorithm) + theme_bw()#
tmp %>%#
  filter(metric=='cumulative_regret', T>3) %>%#
qplot(#
x = T/1000, y = q50, color = algorithm,fill=algorithm, data=.,geom='line',#
ylab='Cumulative regret', xlab='T/1000', main='Regret distribution') +#
geom_ribbon(aes(ymin=q25+0.001,ymax=q75+0.001), alpha=0.5) + #
geom_ribbon(aes(ymin=q025+0.001,ymax=q975+0.001), alpha=0.25) + #
geom_ribbon(aes(ymin=min,ymax=max), alpha=0.01) +#
   theme_bw()
tmp %>%#
  filter(metric=='knows_best', T>3) %>%#
qplot(#
x = T, y = mean, color = algorithm,fill=algorithm, data=.,geom='line') + #
    facet_grid(delay ~ .) + theme_bw()
